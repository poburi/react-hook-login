{"version":3,"sources":["components/Login.tsx","App.tsx","index.tsx"],"names":["styled","TextField","Paper","React","createContext","initialState","isAuthenticated","user","token","reducer","state","action","type","localStorage","setItem","JSON","stringify","payload","clear","App","useReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qpBAuEcA,YAAOC,IAAPD,CAAH,KAKEA,YAAOE,IAAPF,CAAH,KCpEiBG,IAAMC,cAGvB,MDCH,ICcDC,EAAsB,CAC1BC,iBAAiB,EACjBC,KAAM,KACNC,MAAO,MAGHC,EAAU,SAACC,EAAYC,GAC3B,OAAQA,EAAOC,MACb,IAAK,QAGH,OAFAC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUL,EAAOM,QAAQV,OAC3DM,aAAaC,QAAQ,QAASC,KAAKC,UAAUL,EAAOM,QAAQT,QACrD,eACFE,EADL,CAEEJ,iBAAiB,EACjBC,KAAMI,EAAOM,QAAQV,KACrBC,MAAOG,EAAOM,QAAQT,QAE1B,IAAK,SAEH,OADAK,aAAaK,QACN,eACFR,EADL,CAEEJ,iBAAiB,EACjBC,KAAM,OAGV,QACE,OAAOG,IAiBES,MAbf,WAAe,MAGahB,IAAMiB,WAAWX,EAASJ,GAHvC,8BCpDfgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.5f20105c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { TextField, Paper, StylesProvider, Button } from \"@material-ui/core\";\n\nimport { AuthContext } from \"../App\";\n\ninterface ILogin {\n  email: string | null;\n  password: string | null;\n  isSubmitting: boolean | null;\n  errorMessage: string | null;\n}\nexport const Login: React.FC = () => {\n  const initialState = {\n    email: \"\",\n    password: \"\",\n    isSubmitting: false,\n    errorMessage: null,\n  };\n  const [data, setData] = useState(initialState);\n\n  const handleInputChange = (event: any) => {\n    event.preventDefault();\n    setData({ ...data, [event.target.name]: event.target.value }); // email이면 email, password면 password\n    // console.log(data);\n  };\n\n  const handleFormSubmit = (event: React.FocusEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setData({ ...data, isSubmitting: true, errorMessage: null });\n    fetch(\"\");\n  };\n\n  return (\n    <StylesProvider injectFirst>\n      <Wrap elevation={3}>\n        <form onSubmit={handleFormSubmit}>\n          <Input\n            type=\"text\"\n            name=\"email\"\n            label=\"email\"\n            variant=\"outlined\"\n            onChange={handleInputChange}\n            fullWidth\n          />\n          <Input\n            type=\"password\"\n            name=\"password\"\n            label=\"password\"\n            variant=\"outlined\"\n            onChange={handleInputChange}\n            fullWidth\n          />\n          <Button\n            type=\"submit\"\n            size=\"large\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={data.isSubmitting}\n            fullWidth\n          >\n            {data.isSubmitting ? \"로딩\" : \"로그인\"}\n          </Button>\n        </form>\n      </Wrap>\n    </StylesProvider>\n  );\n};\n\nexport default Login;\n\nconst Input = styled(TextField)`\n  display: block;\n  margin-bottom: 20px;\n`;\n\nconst Wrap = styled(Paper)`\n  width: 460px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  padding: 50px 0;\n\n  form {\n    width: 100%;\n    padding: 0 20px;\n  }\n`;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Login from \"./components/Login\";\nimport Home from \"./components/Home\";\nimport Header from \"./components/Header\";\n\n// export const AuthContext = React.createContext(null); -> typescript error\nexport const AuthContext = React.createContext<{\n  state: any;\n  dispatch: React.Dispatch<any>;\n} | null>(null);\n\ninterface IAuth {\n  isAuthenticated: boolean;\n  user: string | null;\n  token: string | null;\n}\n\n/* \n@desc: 리듀서에서 사용될 초기 상태 객체\n@params:\n- isAuthenticated: 사용자 인증 여부\n- user: 사용자 데이터 \n- token: 토큰 데이터\n*/\nconst initialState: IAuth = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n};\n\nconst reducer = (state: any, action: any) => {\n  switch (action.type) {\n    case \"LOGIN\":\n      localStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n      localStorage.setItem(\"token\", JSON.stringify(action.payload.token));\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n      };\n    case \"LOGOUT\":\n      localStorage.clear();\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n      };\n      return;\n    default:\n      return state; // 작업이 전달되지 않으면 초기 상태 객체를 반환\n  }\n};\n\nfunction App() {\n  // dispatch 상태에 따라 업데이트 된다\n  // Dispatch는 상태를 변환하거나 변경하는 조치를 호출, 배포하는데 사용하는 함수\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  return (\n    // Context.Provider 컴포넌트에서 value객체를 전달합니다.\n    <AuthContext.Provider value={{ state, dispatch }}>\n      <Header />\n      <div className=\"App\">{state.isAuthenticated ? <Home /> : <Login />}</div>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}